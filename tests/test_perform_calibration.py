import unittest

import numpy as np

from depth_camera_array.perform_calibration import define_base_camera, generate_extrinsics

WORLD_POINTS = {
    1: [0.3, 0., 0.],
    2: [0., 0., 0.],
    3: [0., 0., 0.2],
    4: [-2.3, 1.3, 4.5],
    5: [0.5, 0.4, -1.4],
    6: [-0.2, 2.8, 3.1],
    7: [0.9, 1.45, -2.4],
    8: [0.6, 3.1, 1.2],
    9: [-0.3, 2.9, -4.6],
    10: [0.1, 1.4, 2.3]
}

REFERENCE_POINTS = {
    'cam_1': {
        'aruco': [1, 4, 5, 6, 9],
        'centers': [
            [1.061972682385508, 3.2283564821658843, -2.1353988575059306],
            [-4.236616239342009, 3.3873650594887086, -2.9097836240079937],
            [2.3262363837580824, 3.8726991118254275, -2.518099604815869],
            [-2.5122170311604655, 5.3891994114953405, -1.6295076706534375],
            [4.438154946856648, 6.704606097666394, -4.67450927248734]]
    },
    'cam_2': {
        'aruco': [1, 4, 2, 6, 9, 10, 7, 3],
        'centers': [
            [3.5576816164790634, 0.8321197757585809, -3.0822845790252007],
            [2.6957552700437475, -4.246237276732767, -1.6100845789680007],
            [3.4320312610196986, 0.6430086757115304, -3.278368692957242],
            [1.8712453917889231, -1.7796268179922174, -0.24772769601213707],
            [-0.5527918006739907, 4.131375624573358, -4.548203681099345],
            [2.9590790495652053, -1.023749636652921, -1.214820057743613],
            [1.849572798344455, 3.126616284601869, -3.282659174148778],
            [3.49167761289205, 0.487938107122034, -3.1670339211919845]]
    },
    'cam_3': {
        'aruco': [5, 9, 3, 2, 10, 1],
        'centers': [
            [-0.9460346811171982, -3.334183141656747, -0.623089955219494],
            [0.49480811807800995, -2.2370559485313435, 3.0985070035474216],
            [-0.48278414929457447, -4.003546270855325, -2.142086973346046],
            [-0.5379103614972061, -3.9998323373302718, -1.9498701493110786],
            [1.053123311618073, -3.04814283719597, -3.9050936547660444],
            [-0.7260785710409359, -3.7735812322718836, -2.008206782126227]]
    }
}
CAM_TO_REAL = {
    'cam_1': np.array([
        [0.36063609, 0.14959066, 0.92063253, 1.4],
        [-0.20461186, 0.97569952, - 0.07838645, -3.1],
        [-0.90998659, - 0.16010336, 0.38248048, 2.3],
        [0., 0., 0., 1.]
    ]),
    'cam_2': np.array([
        [0.41883452, 0.63037033, 0.65361372, 0.3],
        [-0.85769194, 0.03822586, 0.51274099, 4.6],
        [0.29823177, -0.77535284, 0.55667386, 1.3],
        [-0., 0., 0., 1.]
    ]),
    'cam_3': np.array([
        [-0.62722736, 0.75417035, -0.19445544, 2.3],
        [0.72843212, 0.65641622, 0.19622537, 3.4],
        [0.27563106, -0.01856967, -0.96108412, -1.8],
        [0., 0., 0., 1.]
    ])
}


class MyTestCase(unittest.TestCase):
    def test_generate_extrinsics(self):
        results = generate_extrinsics(REFERENCE_POINTS)
        for cam, expected in CAM_TO_REAL.items():
            np.testing.assert_array_almost_equal(results[cam], expected)

    def test_define_base_camera(self):
        expected = 'cam_2'
        result = define_base_camera(REFERENCE_POINTS)
        self.assertEqual(expected, result)


if __name__ == '__main__':
    unittest.main()
